steps:
# ============================
# 1. Checkout Code
# ============================
- name: 'gcr.io/cloud-builders/git'
  entrypoint: bash
  args:
    - -c
    - |
      git clone https://github.com/$REPO_NAME.git .
      git checkout $BRANCH_NAME

# ============================
# 2. Install Dependencies
# ============================
- name: 'python:3.11'
  entrypoint: bash
  args:
    - -c
    - |
      pip install --upgrade pip
      pip install -r requirements.txt

# ============================
# 3. Run Tests
# ============================
- name: 'python:3.11'
  entrypoint: bash
  args:
    - -c
    - |
      echo " No test cases running "

# ============================
# 4. CodeQL Scan (placeholder)
# ============================
- name: 'gcr.io/cloud-builders/curl'
  entrypoint: bash
  args:
    - -c
    - |
      echo "Running CodeQL scan (placeholder). Integrate GH CodeQL here if needed."

# ============================
# 5. Build Python Wheel & Copy to GCS
# ============================
- name: 'python:3.11'
  entrypoint: bash
  args:
    - -c
    - |
      python setup.py bdist_wheel
      gsutil cp dist/*.whl gs://$PROJECT_ID-artifacts/python/

# ============================
# 6. Build Docker Image
# ============================
- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'build', '-t',
      'us-central1-docker.pkg.dev/$PROJECT_ID/app1/pythonapp1:${SHORT_SHA}', '.'
    ]

# ============================
# 7. Trivy Image Scan
# ============================
- name: 'aquasec/trivy'
  entrypoint: bash
  args:
    - -c
    - |
      trivy image --exit-code 0 --severity HIGH,CRITICAL \
        --format json \
        -o trivy-report.json \
        us-central1-docker.pkg.dev/$PROJECT_ID/app1/pythonapp1:${SHORT_SHA}
      gsutil cp trivy-report.json gs://$PROJECT_ID-artifacts/reports/

# ============================
# 8. Push Docker Image
# ============================
- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'push',
      'us-central1-docker.pkg.dev/$PROJECT_ID/app1/pythonapp1:${SHORT_SHA}'
    ]

# ============================
# 9. DAST Scan (OWASP ZAP)
# ============================
- name: 'owasp/zap2docker-stable'
  entrypoint: bash
  args:
    - -c
    - |
      echo "Running OWASP ZAP Scan..."
      zap-baseline.py -t http://my-service.default.svc.cluster.local:8080 \
        -r zap-report.html || true
      gsutil cp zap-report.html gs://$PROJECT_ID-artifacts/reports/

# ============================
# 10. Update Kubernetes Deployment Manifest
# ============================
- name: 'gcr.io/cloud-builders/git'
  entrypoint: bash
  args:
    - -c
    - |
      git config --global user.email "cloudbuild@$PROJECT_ID.iam.gserviceaccount.com"
      git config --global user.name "Cloud Build"
      sed -i "s|image: .*|image: us-central1-docker.pkg.dev/$PROJECT_ID/app1/pythonapp1:${SHORT_SHA}|" kubernetes/deployment.yaml
      git add kubernetes/deployment.yaml
      git commit -m "Update image to ${SHORT_SHA}" || echo "No changes to commit"
      git push https://source.developers.google.com/p/$PROJECT_ID/r/gke-cicd HEAD:main

# ============================
# Substitutions
# ============================
substitutions:
  _SERVICE_NAME: pythonapp1
  _REGION: us-central1

# ============================
# Artifact Registry Images
# ============================
images:
  - "us-central1-docker.pkg.dev/$PROJECT_ID/app1/pythonapp1:${SHORT_SHA}"

# ============================
# Build Artifacts to GCS
# ============================
artifacts:
  objects:
    location: gs://$PROJECT_ID-artifacts/builds/
    paths: ["dist/*.whl"]
