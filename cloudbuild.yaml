steps:
# 1. Checkout Code
- name: 'gcr.io/cloud-builders/git'
  args: ['clone', 'https://github.com/$REPO_NAME.git']
  id: 'Checkout Code'

# 2. Setup Python & Install Dependencies
- name: 'python:3.11'
  entrypoint: bash
  args:
    - -c
    - |
      python -m pip install --upgrade pip
      pip install -r requirements.txt

# 3. Run Tests
- name: 'python:3.11'
  entrypoint: bash
  args:
    - -c
    - |
      echo "No test cases running"

# 4. CodeQL Scan
- name: 'gcr.io/cloud-builders/git'
  entrypoint: bash
  args:
    - -c
    - |
      echo "Running CodeQL analysis..."
      # Your CodeQL steps here

# 5. Store artifacts in GCS
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp', '*.whl', 'gs://pythonapp1/artifacts/']

# 6. Docker Build
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/pythonapp1:$SHORT_SHA', '.']

# 7. Trivy Scan
- name: 'aquasec/trivy:latest'
  entrypoint: trivy
  args: ['image', 'us-central1-docker.pkg.dev/$PROJECT_ID/pythonapp1:$SHORT_SHA']

# 8. Push Docker Image
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/pythonapp1:$SHORT_SHA']

# 9. OWASP ZAP DAST
- name: 'owasp/zap2docker-stable'
  entrypoint: zap-baseline.py
  args: ['-t', 'http://pythonapp1-service:8080']

# 10. Update Deployment YAML in GitHub
- name: 'gcr.io/cloud-builders/git'
  entrypoint: bash
  args:
    - -c
    - |
      sed -i "s|image: .*|image: us-central1-docker.pkg.dev/$PROJECT_ID/pythonapp1:$SHORT_SHA|" kubernetes/deployment.yaml
      git config --global user.email "cloudbuild@example.com"
      git config --global user.name "Cloud Build"
      git add kubernetes/deployment.yaml
      git commit -m "Update image to $SHORT_SHA"
      git push https://github.com/$REPO_NAME.git HEAD:main

# Options (only logging allowed here)
options:
  logging: GCS_ONLY
